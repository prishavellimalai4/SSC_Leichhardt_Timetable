name: Weekly Data Update

on:
  # Schedule to run every Monday at 5:00 AM Sydney time
  # Sydney time (AEDT/AEST) is UTC+10/UTC+11
  # 5:00 AM Monday Sydney = 19:00 UTC Sunday for AEST or 18:00 UTC Sunday for AEDT
  schedule:
    - cron: "0 19 * * 0" # 19:00 UTC Sunday = 5:00 AM Monday Sydney (AEST)
    - cron: "0 18 * * 0" # 18:00 UTC Sunday = 5:00 AM Monday Sydney (AEDT)

  # Allow manual triggering
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  update-weekly-data:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Sentral API credentials
        env:
          REST_API_KEY: ${{ secrets.REST_API_KEY }}
        run: |
          if [ -z "$REST_API_KEY" ]; then
            echo "‚ùå REST_API_KEY secret is not set"
            exit 1
          fi
          echo "‚úÖ Sentral API credentials loaded from secrets"

          # Replace placeholder in config.json with actual API key
          sed -i "s/\${REST_API_KEY}/$REST_API_KEY/g" config.json
          echo "‚úÖ Updated config.json with API key"

      - name: Generate bell times data
        run: |
          echo "üîî Generating bell times data..."

          # Run the generation script and capture exit code
          if python3 generate_bell_times.py; then
            echo "‚úÖ Bell times generation and validation passed"
            
            if [ -f "bell_times.json" ]; then
              echo "‚úÖ Bell times file exists"
              ls -la bell_times.json
              
              # Additional JSON structure validation
              echo "üîç Validating bell times JSON structure..."
              if python3 -c "import json; json.load(open('bell_times.json'))" 2>/dev/null; then
                echo "‚úÖ Bell times JSON structure validation passed"
              else
                echo "‚ùå Bell times JSON structure validation failed - invalid JSON format"
                echo "Generated file content (first 500 chars):"
                head -c 500 bell_times.json
                exit 1
              fi
            else
              echo "‚ùå Bell times file was not created"
              exit 1
            fi
          else
            echo "‚ùå Bell times generation or validation failed"
            exit 1
          fi

      - name: Generate calendar data
        run: |
          echo "üìÖ Generating calendar data..."

          # Run the generation script and capture exit code
          if python3 generate_calendar.py; then
            echo "‚úÖ Calendar generation and validation passed"
            
            if [ -f "calendar.json" ]; then
              echo "‚úÖ Calendar file exists"
              ls -la calendar.json
              
              # Additional JSON structure validation
              echo "üîç Validating calendar JSON structure..."
              if python3 -c "import json; json.load(open('calendar.json'))" 2>/dev/null; then
                echo "‚úÖ Calendar JSON structure validation passed"
              else
                echo "‚ùå Calendar JSON structure validation failed - invalid JSON format"
                echo "Generated file content (first 500 chars):"
                head -c 500 calendar.json
                exit 1
              fi
            else
              echo "‚ùå Calendar file was not created"
              exit 1
            fi
          else
            echo "‚ùå Calendar generation or validation failed"
            exit 1
          fi

      - name: Check for changes
        id: changes
        run: |
          # Check if any data files were updated
          if git diff --quiet HEAD -- bell_times.json calendar.json .logs/*.log; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected in data files"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected in data files"
            git diff --name-only HEAD -- bell_times.json calendar.json .logs/*.log
          fi

      - name: Pull latest changes before commit
        if: steps.changes.outputs.changes == 'true'
        run: |
          echo "üîÑ Pulling latest changes from remote..."
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

          # Stash any local changes before pulling
          echo "üì¶ Stashing local changes..."
          git stash push -m "Auto-stash before pull" -- bell_times.json calendar.json .logs/*.log

          # Pull latest changes
          git pull --rebase origin main || {
            echo "‚ö†Ô∏è Rebase failed, attempting merge strategy..."
            git pull --no-rebase origin main
          }

          # Restore stashed changes
          echo "üì§ Restoring stashed changes..."
          git stash pop || {
            echo "‚ö†Ô∏è Stash pop failed, checking if there are conflicts..."
            # If stash pop fails, manually apply the stashed files
            git checkout stash@{0} -- bell_times.json calendar.json .logs/*.log 2>/dev/null || true
            git stash drop || true
          }

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üìä Weekly data update: bell times and calendar"
          file_pattern: "bell_times.json calendar.json .logs/*_generation.log"
          commit_user_name: "GitHub Action"
          commit_user_email: "action@github.com"
          commit_author: "Weekly Data Bot <action@github.com>"
          push_options: "--force-with-lease"

      - name: Create summary
        if: always()
        run: |
          echo "## üìä Weekly Data Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated Files:**" >> $GITHUB_STEP_SUMMARY

          if [ -f "bell_times.json" ]; then
            echo "- ‚úÖ Bell times data" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Bell times data (failed)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "calendar.json" ]; then
            echo "- ‚úÖ Calendar data" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Calendar data (failed)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- üïê Scheduled: Weekdays at 8:00 AM Sydney time" >> $GITHUB_STEP_SUMMARY
          echo "- üêç Python version: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- üåè Timezone: Australia/Sydney" >> $GITHUB_STEP_SUMMARY
          echo "- üìÅ Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- üåø Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Time:**" >> $GITHUB_STEP_SUMMARY
          echo "- üåç UTC: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- üá¶üá∫ Sydney: $(TZ='Australia/Sydney' date)" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-data-${{ github.run_number }}
          path: |
            bell_times.json
            calendar.json
            .logs/*_generation.log
          retention-days: 7

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Weekly data update failed!"
          echo "Check the logs above for details."
          echo "Common issues:"
          echo "  - API credentials may have expired"
          echo "  - Sentral server may be unreachable"
          echo "  - Network connectivity issues"
          echo ""
          echo "Contact IT support if the issue persists."
